/* Auto-generated by genmsg_cpp for file /home/gmanfred/devel/ros/packs/vision/seg/seg_plans_objs/srv/PlantopSegmentation.srv */
#ifndef SEG_PLANS_OBJS_SERVICE_PLANTOPSEGMENTATION_H
#define SEG_PLANS_OBJS_SERVICE_PLANTOPSEGMENTATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "tabletop_object_detector/Table.h"
#include "sensor_msgs/PointCloud2.h"
#include "sensor_msgs/Image.h"

namespace seg_plans_objs
{
template <class ContainerAllocator>
struct PlantopSegmentationRequest_ {
  typedef PlantopSegmentationRequest_<ContainerAllocator> Type;

  PlantopSegmentationRequest_()
  : num_plans_requested(0)
  {
  }

  PlantopSegmentationRequest_(const ContainerAllocator& _alloc)
  : num_plans_requested(0)
  {
  }

  typedef int64_t _num_plans_requested_type;
  int64_t num_plans_requested;


  typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlantopSegmentationRequest
typedef  ::seg_plans_objs::PlantopSegmentationRequest_<std::allocator<void> > PlantopSegmentationRequest;

typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationRequest> PlantopSegmentationRequestPtr;
typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationRequest const> PlantopSegmentationRequestConstPtr;


template <class ContainerAllocator>
struct PlantopSegmentationResponse_ {
  typedef PlantopSegmentationResponse_<ContainerAllocator> Type;

  PlantopSegmentationResponse_()
  : table()
  , clusters()
  , cluster_images()
  , result(0)
  {
  }

  PlantopSegmentationResponse_(const ContainerAllocator& _alloc)
  : table(_alloc)
  , clusters(_alloc)
  , cluster_images(_alloc)
  , result(0)
  {
  }

  typedef  ::tabletop_object_detector::Table_<ContainerAllocator>  _table_type;
   ::tabletop_object_detector::Table_<ContainerAllocator>  table;

  typedef std::vector< ::sensor_msgs::PointCloud2_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::other >  _clusters_type;
  std::vector< ::sensor_msgs::PointCloud2_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::other >  clusters;

  typedef std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other >  _cluster_images_type;
  std::vector< ::sensor_msgs::Image_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::Image_<ContainerAllocator> >::other >  cluster_images;

  typedef int32_t _result_type;
  int32_t result;

  enum { NO_CLOUD_RECEIVED = 1 };
  enum { NO_TABLE = 2 };
  enum { OTHER_ERROR = 3 };
  enum { SUCCESS = 4 };

  typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PlantopSegmentationResponse
typedef  ::seg_plans_objs::PlantopSegmentationResponse_<std::allocator<void> > PlantopSegmentationResponse;

typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationResponse> PlantopSegmentationResponsePtr;
typedef boost::shared_ptr< ::seg_plans_objs::PlantopSegmentationResponse const> PlantopSegmentationResponseConstPtr;

struct PlantopSegmentation
{

typedef PlantopSegmentationRequest Request;
typedef PlantopSegmentationResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PlantopSegmentation
} // namespace seg_plans_objs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6c042850bdcce03549506f85b146e77b";
  }

  static const char* value(const  ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6c042850bdcce035ULL;
  static const uint64_t static_value2 = 0x49506f85b146e77bULL;
};

template<class ContainerAllocator>
struct DataType< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seg_plans_objs/PlantopSegmentationRequest";
  }

  static const char* value(const  ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 num_plans_requested\n\
\n\
";
  }

  static const char* value(const  ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "26ce45db91920805e7bcff3f22b1ca05";
  }

  static const char* value(const  ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x26ce45db91920805ULL;
  static const uint64_t static_value2 = 0xe7bcff3f22b1ca05ULL;
};

template<class ContainerAllocator>
struct DataType< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seg_plans_objs/PlantopSegmentationResponse";
  }

  static const char* value(const  ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 NO_CLOUD_RECEIVED=1\n\
int32 NO_TABLE=2\n\
int32 OTHER_ERROR=3\n\
int32 SUCCESS=4\n\
tabletop_object_detector/Table table\n\
sensor_msgs/PointCloud2[] clusters\n\
sensor_msgs/Image[] cluster_images\n\
int32 result\n\
\n\
\n\
================================================================================\n\
MSG: tabletop_object_detector/Table\n\
# Informs that a planar table has been detected at a given location\n\
\n\
# The pose gives you the transform that take you to the coordinate system\n\
# of the table, with the origin somewhere in the table plane and the \n\
# z axis normal to the plane\n\
geometry_msgs/PoseStamped pose\n\
\n\
# These values give you the observed extents of the table, along x and y,\n\
# in the table's own coordinate system (above)\n\
# there is no guarantee that the origin of the table coordinate system is\n\
# inside the boundary defined by these values. \n\
float32 x_min\n\
float32 x_max\n\
float32 y_min\n\
float32 y_max\n\
\n\
# There is no guarantee that the table does NOT extend further than these \n\
# values; this is just as far as we've observed it.\n\
\n\
\n\
# Newer table definition as triangle mesh of convex hull (relative to pose)\n\
shape_msgs/Mesh convex_hull\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: shape_msgs/Mesh\n\
# Definition of a mesh\n\
\n\
# list of triangles; the index values refer to positions in vertices[]\n\
MeshTriangle[] triangles\n\
\n\
# the actual vertices that make up the mesh\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: shape_msgs/MeshTriangle\n\
# Definition of a triangle's vertices\n\
uint32[3] vertex_indices\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
";
  }

  static const char* value(const  ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.num_plans_requested);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlantopSegmentationRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.table);
    stream.next(m.clusters);
    stream.next(m.cluster_images);
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PlantopSegmentationResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<seg_plans_objs::PlantopSegmentation> {
  static const char* value() 
  {
    return "1200a1dffca987703a9988258c174cc5";
  }

  static const char* value(const seg_plans_objs::PlantopSegmentation&) { return value(); } 
};

template<>
struct DataType<seg_plans_objs::PlantopSegmentation> {
  static const char* value() 
  {
    return "seg_plans_objs/PlantopSegmentation";
  }

  static const char* value(const seg_plans_objs::PlantopSegmentation&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1200a1dffca987703a9988258c174cc5";
  }

  static const char* value(const seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seg_plans_objs/PlantopSegmentation";
  }

  static const char* value(const seg_plans_objs::PlantopSegmentationRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1200a1dffca987703a9988258c174cc5";
  }

  static const char* value(const seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seg_plans_objs/PlantopSegmentation";
  }

  static const char* value(const seg_plans_objs::PlantopSegmentationResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SEG_PLANS_OBJS_SERVICE_PLANTOPSEGMENTATION_H

