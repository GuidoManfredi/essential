/* Auto-generated by genmsg_cpp for file /home/gmanfred/devel/ros/Vision_pipeline/vision/reco/reco_color/srv/HistogramRecognition.srv */
#ifndef RECO_COLOR_SERVICE_HISTOGRAMRECOGNITION_H
#define RECO_COLOR_SERVICE_HISTOGRAMRECOGNITION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sensor_msgs/Image.h"



namespace reco_color
{
template <class ContainerAllocator>
struct HistogramRecognitionRequest_ {
  typedef HistogramRecognitionRequest_<ContainerAllocator> Type;

  HistogramRecognitionRequest_()
  : sticker()
  , names()
  {
  }

  HistogramRecognitionRequest_(const ContainerAllocator& _alloc)
  : sticker(_alloc)
  , names(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _sticker_type;
   ::sensor_msgs::Image_<ContainerAllocator>  sticker;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  names;


  typedef boost::shared_ptr< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HistogramRecognitionRequest
typedef  ::reco_color::HistogramRecognitionRequest_<std::allocator<void> > HistogramRecognitionRequest;

typedef boost::shared_ptr< ::reco_color::HistogramRecognitionRequest> HistogramRecognitionRequestPtr;
typedef boost::shared_ptr< ::reco_color::HistogramRecognitionRequest const> HistogramRecognitionRequestConstPtr;


template <class ContainerAllocator>
struct HistogramRecognitionResponse_ {
  typedef HistogramRecognitionResponse_<ContainerAllocator> Type;

  HistogramRecognitionResponse_()
  : hist()
  , names()
  , result(0)
  {
  }

  HistogramRecognitionResponse_(const ContainerAllocator& _alloc)
  : hist(_alloc)
  , names(_alloc)
  , result(0)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _hist_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  hist;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  names;

  typedef int32_t _result_type;
  int32_t result;

  enum { SUCCESS = 0 };
  enum { ERROR = 1 };

  typedef boost::shared_ptr< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HistogramRecognitionResponse
typedef  ::reco_color::HistogramRecognitionResponse_<std::allocator<void> > HistogramRecognitionResponse;

typedef boost::shared_ptr< ::reco_color::HistogramRecognitionResponse> HistogramRecognitionResponsePtr;
typedef boost::shared_ptr< ::reco_color::HistogramRecognitionResponse const> HistogramRecognitionResponseConstPtr;

struct HistogramRecognition
{

typedef HistogramRecognitionRequest Request;
typedef HistogramRecognitionResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct HistogramRecognition
} // namespace reco_color

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1384991d92018e488275b50869073a54";
  }

  static const char* value(const  ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1384991d92018e48ULL;
  static const uint64_t static_value2 = 0x8275b50869073a54ULL;
};

template<class ContainerAllocator>
struct DataType< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reco_color/HistogramRecognitionRequest";
  }

  static const char* value(const  ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/Image sticker\n\
string[] names\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3b502de810b59b6027560a69d6f79e7f";
  }

  static const char* value(const  ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3b502de810b59b60ULL;
  static const uint64_t static_value2 = 0x27560a69d6f79e7fULL;
};

template<class ContainerAllocator>
struct DataType< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reco_color/HistogramRecognitionResponse";
  }

  static const char* value(const  ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
int32 SUCCESS=0\n\
int32 ERROR=1\n\
\n\
float32[] hist\n\
\n\
string[] names\n\
\n\
\n\
int32 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reco_color::HistogramRecognitionRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.sticker);
    stream.next(m.names);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HistogramRecognitionRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reco_color::HistogramRecognitionResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.hist);
    stream.next(m.names);
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HistogramRecognitionResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<reco_color::HistogramRecognition> {
  static const char* value() 
  {
    return "1ff5ad4f33bf52fd9493df293aa6d5a9";
  }

  static const char* value(const reco_color::HistogramRecognition&) { return value(); } 
};

template<>
struct DataType<reco_color::HistogramRecognition> {
  static const char* value() 
  {
    return "reco_color/HistogramRecognition";
  }

  static const char* value(const reco_color::HistogramRecognition&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<reco_color::HistogramRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1ff5ad4f33bf52fd9493df293aa6d5a9";
  }

  static const char* value(const reco_color::HistogramRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<reco_color::HistogramRecognitionRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reco_color/HistogramRecognition";
  }

  static const char* value(const reco_color::HistogramRecognitionRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<reco_color::HistogramRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1ff5ad4f33bf52fd9493df293aa6d5a9";
  }

  static const char* value(const reco_color::HistogramRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<reco_color::HistogramRecognitionResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reco_color/HistogramRecognition";
  }

  static const char* value(const reco_color::HistogramRecognitionResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // RECO_COLOR_SERVICE_HISTOGRAMRECOGNITION_H

