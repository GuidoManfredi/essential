#pragma once

#include <opencv2/core/core.hpp>
#include <opencv2/features2d/features2d.hpp>
#include <opencv2/nonfree/nonfree.hpp>
#include <opencv2/imgproc/imgproc.hpp>

class Pipeline2D {
  public:
    int extractFeatures(cv::Mat image, 
                    std::vector<cv::KeyPoint> &kpts, cv::Mat &descriptors);
    int match(cv::Mat descs1, cv::Mat descs2, 
              std::vector<cv::DMatch> &matches);
    int computeHomography();
};

/*
for(size_t i = 0; i < faces.size(); ++i) {
    int found = find(faces[i], frame, matches);
    if (found == 1)
        removeMatches(matches, frame);
}
*/

int find(faces[i], frame, matches, P) {
    int matched = match(faces[i].descriptors_, frame.descriptors, matches);
    int localised = computeHomography(faces[i].keypoints_, frame.keypoints_, matches, P);
    if (matched && localised)
        return 1;
    else
        return 0;
}
