"""autogenerated by genpy from hand_detect/RectangleRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RectangleRequest(genpy.Message):
  _md5sum = "800a4f8be2c695cb0abaae7eb88676ad"
  _type = "hand_detect/RectangleRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 num_hands

"""
  __slots__ = ['num_hands']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       num_hands

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RectangleRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num_hands is None:
        self.num_hands = 0
    else:
      self.num_hands = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_i.pack(self.num_hands))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.num_hands,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_i.pack(self.num_hands))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.num_hands,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
"""autogenerated by genpy from hand_detect/RectangleResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hand_detect.msg

class RectangleResponse(genpy.Message):
  _md5sum = "c78a300dff07b60288103d0a98004613"
  _type = "hand_detect/RectangleResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Rectangle[] rect


================================================================================
MSG: hand_detect/Rectangle
int32 x
int32 y
int32 width
int32 height

"""
  __slots__ = ['rect']
  _slot_types = ['hand_detect/Rectangle[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rect

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RectangleResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rect is None:
        self.rect = []
    else:
      self.rect = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.rect)
      buff.write(_struct_I.pack(length))
      for val1 in self.rect:
        _x = val1
        buff.write(_struct_4i.pack(_x.x, _x.y, _x.width, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.rect is None:
        self.rect = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rect = []
      for i in range(0, length):
        val1 = hand_detect.msg.Rectangle()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
        self.rect.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.rect)
      buff.write(_struct_I.pack(length))
      for val1 in self.rect:
        _x = val1
        buff.write(_struct_4i.pack(_x.x, _x.y, _x.width, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.rect is None:
        self.rect = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.rect = []
      for i in range(0, length):
        val1 = hand_detect.msg.Rectangle()
        _x = val1
        start = end
        end += 16
        (_x.x, _x.y, _x.width, _x.height,) = _struct_4i.unpack(str[start:end])
        self.rect.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4i = struct.Struct("<4i")
class Rectangle(object):
  _type          = 'hand_detect/Rectangle'
  _md5sum = '9a06a55897df399bd353353c13175d07'
  _request_class  = RectangleRequest
  _response_class = RectangleResponse
