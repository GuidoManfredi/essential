#include <ros/ros.h>
#include <assert.h>

#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/Image.h>
#include <sensor_msgs/image_encodings.h>

#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>

using namespace std;
using namespace cv;
using namespace pcl;
namespace enc = sensor_msgs::image_encodings;

PointCloud<PointXYZ>::Ptr cloud (new PointCloud<PointXYZ>);
Mat img;

void cloud_callback(const sensor_msgs::PointCloud2& msg) {
	fromROSMsg (msg, *cloud);
}

void image_callback(const sensor_msgs::ImageConstPtr& msg) {
	cv_bridge::CvImagePtr cv_ptr;
  try {
    cv_ptr = cv_bridge::toCvCopy(msg, enc::BGR8);
  }
  catch (cv_bridge::Exception& e) {
    ROS_ERROR("cv_bridge exception: %s", e.what());
    return;
  }
	img = cv_ptr->image;
}

int main(int argc, char** argv)
{
	assert (argc==3 && "Usage : frontEnd image_topic cloud_topic");
	
	ros::init(argc, argv, "frontEnd");
	ros::NodeHandle n;

	ros::Subscriber image_subscriber = n.subscribe(argv[1], 1, image_callback);
	ros::Subscriber cloud_subscriber = n.subscribe(argv[2], 1, cloud_callback);

	ros::spin ();
	
  return 0;
}

