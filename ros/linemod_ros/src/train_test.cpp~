#include <ros/ros.h>
#include <pcl_ros/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/visualization/cloud_viewer.h>

#include "../Linemod/OnlineGrabber.h"

using namespace std;
using namespace pcl;

OnlineGrabber og;
visualization::PCLVisualizer viewer("Training");

void cloud_cb(const PointCloudType::ConstPtr& msg) {
	if (!viewer.updatePointCloud (msg, "single_cloud"))
		viewer.addPointCloud (msg, "single_cloud");
    og.grab(msg);
    PointXYZ min, max;
    og.detect(msg, min, max);
    
    viewer.removeShape ("cube", 0);
    viewer.addCube (min.x, max.x, min.y, max.y, min.z, max.z);
}

int main(int argc, char** argv) {
    assert(argc == 2 && "Usage: train_test cloud_in");

	ros::init(argc, argv, "linemod_online_train");
	ros::NodeHandle n;
	ros::Subscriber sub_clouds = n.subscribe(argv[1], 1, cloud_cb);
	
	viewer.setBackgroundColor (0, 0, 0);
	viewer.initCameraParameters ();
	
	ros::Rate loop_rate(10);
	while (ros::ok() && !viewer.wasStopped()) {
	    viewer.spinOnce(1);
		ros::spinOnce();
		loop_rate.sleep ();
	}

	return 0;
}
